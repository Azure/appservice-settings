"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const exec = require("@actions/exec");
const io = require("@actions/io");
const core = require("@actions/core");
var azCloudDetails, azPath;
class AzCliAuthHandler {
    constructor(subscriptionId) {
        this._subscriptionID = '';
        this._baseUrl = 'https://management.azure.com/';
        this._token = '';
        this._subscriptionID = subscriptionId;
        this._baseUrl = !!azCloudDetails && azCloudDetails['endpoints']['resourceManager'];
    }
    static getEndpoint(param) {
        if (!this.endpoint) {
            this.endpoint = new AzCliAuthHandler(param);
        }
        return this.endpoint;
    }
    get subscriptionID() {
        return this._subscriptionID;
    }
    get baseUrl() {
        return this._baseUrl;
    }
    getToken(force, args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._token || force) {
                try {
                    let azAccessToken = JSON.parse(yield executeAzCliCommand('account get-access-token', !!args ? args : []));
                    this._token = azAccessToken['accessToken'];
                }
                catch (error) {
                    console.log('Failed to fetch Azure access token');
                    throw error;
                }
            }
            return this._token;
        });
    }
}
exports.AzCliAuthHandler = AzCliAuthHandler;
function initialize() {
    return __awaiter(this, void 0, void 0, function* () {
        azPath = yield io.which("az", true);
        azCloudDetails = JSON.parse(yield executeAzCliCommand('cloud show'));
    });
}
exports.initialize = initialize;
function executeAzCliCommand(command, args) {
    return __awaiter(this, void 0, void 0, function* () {
        let stdout = '';
        let stderr = '';
        let code = yield exec.exec(`"${azPath}" ${command}`, args, {
            silent: true,
            listeners: {
                stdout: (data) => {
                    stdout += data.toString();
                },
                stderr: (data) => {
                    stderr += data.toString();
                }
            }
        });
        if (code != 0) {
            core.debug('Failed to fetch Azure access token');
            throw new Error(stderr);
        }
        return stdout;
    });
}
